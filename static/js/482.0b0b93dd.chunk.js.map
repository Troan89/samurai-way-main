{"version":3,"file":"static/js/482.0b0b93dd.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/FormMessage.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__IY6vr\",\"dialogsItems\":\"Dialogs_dialogsItems__5nv3O\",\"dialog\":\"Dialogs_dialog__dmPYZ\",\"messages\":\"Dialogs_messages__BE13f\",\"message\":\"Dialogs_message__dheTZ\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    id: string\r\n    name: string\r\n\r\n}\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return <div className={s.dialog}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}","import s from \"../Dialogs.module.css\";\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    id: string\r\n}\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}","import React from 'react';\r\nimport {TextField} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {useAppDispatch} from \"../../state/redux-store\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport {addMessage} from \"../../state/DialogsReducer\";\r\n\r\ntype Errors_T = {\r\n    message?: string,\r\n}\r\nexport const FormMessage = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values.message)\r\n            dispatch(addMessage(values.message))\r\n            formik.resetForm({\r\n                values: {message: ''},\r\n            })\r\n        },\r\n        validate: (values) => {\r\n            const errors: Errors_T = {}\r\n            if (!values.message) {\r\n                errors.message = 'Required'\r\n            } else if (values.message.length > 100) {\r\n                errors.message = 'Must not be more 100 symbols'\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n\r\n    return <form onSubmit={formik.handleSubmit} className={s.messages}>\r\n        <div>\r\n            <TextField\r\n                margin=\"normal\"\r\n                error={formik.touched.message && !!formik.errors.message}\r\n                {...formik.getFieldProps('message')}\r\n            />\r\n            {formik.touched.message && formik.errors.message &&\r\n                <div style={{color: 'red'}}>{formik.errors.message}</div>}\r\n        </div>\r\n        <div>\r\n            <button type={'submit'} >Добавить сообщение</button>\r\n        </div>\r\n    </form>\r\n};\r\n\r\n","import React from \"react\";\r\nimport {ActionType, DialogsDataType, MessagesDataType} from \"../../state/State\";\r\nimport {addMessage} from '../../state/DialogsReducer';\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/redux-store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogs: DialogsDataType[]\r\n    messages: MessagesDataType[]\r\n    addMessage: () => void\r\n}\r\n\r\n// export const DialogsContainer = (props: DialogsPropsType) => {\r\n//     let dispatch = useDispatch()\r\n//\r\n//     let dialogs = useSelector<AppRootStateType, DialogsDataType[]>(state => state.dialogsPage.dialogsData)\r\n//     let messages = useSelector<AppRootStateType, MessagesDataType[]>(state => state.dialogsPage.messagesData)\r\n//\r\n//     const addMessage = () => {\r\n//         dispatch(addMessageAC())\r\n//     }\r\n//\r\n//     const onMessageTextChange = (text: string) => {\r\n//         dispatch(updateNewMessageTextAC(text))\r\n//     }\r\n//\r\n//     return (\r\n//         <Dialogs\r\n//             onMessageTextChange={(text: string) => onMessageTextChange(text)}\r\n//             addMessage={addMessage}\r\n//             dialogs={dialogs}\r\n//             messages={messages}\r\n//         />\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogsData,\r\n        messages: state.dialogsPage.messagesData,\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        addMessage\r\n    }),\r\n\r\n)(Dialogs)\r\n\r\n// export const DialogsContainer = WithAuthRedirect(connect(mapStateToProps, {\r\n//     updateNewMessageText,\r\n//     addMessage\r\n// })(Dialogs))\r\n\r\nexport default DialogsContainer","import s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport {DialogsDataType, MessagesDataType} from \"../../state/State\";\r\nimport {addMessage} from \"../../state/DialogsReducer\";\r\nimport {useAppDispatch} from \"../../state/redux-store\";\r\nimport {useFormik} from \"formik\";\r\nimport {TextField} from \"@mui/material\";\r\nimport {FormMessage} from \"./FormMessage\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    onMessageTextChange: (text: string) => void\r\n    addMessage: () => void\r\n    dialogs: DialogsDataType[]\r\n    messages: MessagesDataType[]\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    let dialogsElements = props.dialogs.map((dialog, index) => <DialogItem key={index} name={dialog.name}\r\n                                                                           id={dialog.id}/>)\r\n    let messagesElements = props.messages.map((message, index) => <Message key={index} message={message.message}\r\n                                                                           id={message.id}/>)\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div>{messagesElements}</div>\r\n            <FormMessage />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppRootStateType): mapStateToProps_T => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToProps_T) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n\r\n// types\r\ntype mapStateToProps_T = {\r\n    isAuth: boolean | null\r\n}"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","FormMessage","dispatch","useAppDispatch","formik","useFormik","initialValues","onSubmit","values","console","log","addMessage","resetForm","validate","errors","length","handleSubmit","TextField","margin","error","touched","getFieldProps","style","color","type","compose","WithAuthRedirect","connect","state","dialogs","dialogsPage","dialogsData","messages","messagesData","dialogsElements","map","dialog","index","messagesElements","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}