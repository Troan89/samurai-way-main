{"version":3,"file":"static/js/56.01ff332c.chunk.js","mappings":"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","sources":["Components/Profile/PropfileInfo/ProfileInfo.module.css","Components/Profile/PropfileInfo/ProfileStatusWithHook.tsx","Components/Profile/PropfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/Myposts/MyPosts.module.css?3c92","webpack://samurai-way/./src/Components/Profile/Myposts/Post/Post.module.css?e8df","Components/Profile/Myposts/Post/Post.tsx","Components/Profile/Myposts/FormPost.tsx","Components/Profile/Myposts/MyPostsContainer.tsx","Components/Profile/Myposts/MyPosts.tsx","Components/Profile/Profile.tsx","hoc/withRouter.tsx","Components/Profile/ProfileContainer.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Vvbrq\"};","import React, { ChangeEvent, FC, useEffect, useState } from \"react\"\nimport { ProfilePropsType } from \"../ProfileContainer\"\n\ntype ProfileStatus_T = {\n  status: string\n  updateUserStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHook = (props: ProfileStatus_T) => {\n  const [editMode, setEditMode] = useState(false)\n  const [status, setStatus] = useState(props.status)\n\n  useEffect(() => {\n       setStatus(props.status)\n  }, [props.status])\n\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n  const deActivateEditMode = () => {\n    setEditMode(false)\n    props.updateUserStatus(status)\n  }\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value)\n  }\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <span onDoubleClick={activateEditMode}>{status || \"----\"}</span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input onChange={onStatusChange} autoFocus value={status} onBlur={deActivateEditMode}></input>\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from \"react\"\nimport s from \"./ProfileInfo.module.css\"\nimport { UserProfile_T } from \"../ProfileContainer\"\nimport { Preloader } from \"../../common/Preloader/Preloader\"\nimport { ProfileStatusWithHook } from \"Components/Profile/PropfileInfo/ProfileStatusWithHook\"\n\ntype ProfileInfo_T = {\n    profile: UserProfile_T | null\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nexport const ProfileInfo = ({profile, status, updateUserStatus}: ProfileInfo_T) => {\n    if (!profile) { // потом редирект на логин\n        return <Preloader/>\n    }\n\n    let userContacts = []\n    for (const contact of Object.entries(profile.contacts)) {\n        userContacts.push(`${contact[0]}: ${contact[1]}`)\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large}/>\n                <ProfileStatusWithHook status={status} updateUserStatus={updateUserStatus}/>\n                <div>\n                    Полное имя: {profile.fullName}\n                </div>\n                <div>\n                    Статус: {profile.aboutMe}\n                </div>\n                <div>\n                    Ищу работу: {profile.lookingForAJob ? profile.lookingForAJobDescription : \"Не ищу)\"}\n                </div>\n                <div>\n                    Контакты: {userContacts.map(contact => {\n                    return <div>\n                        {`${contact}, `}\n                    </div>\n                })}\n                </div>\n            </div>\n        </div>\n\n\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__rckFr\",\"posts\":\"MyPosts_posts__L+iAS\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__rs4ej\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    like: number\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://avatars.mds.yandex.net/i?id=1dd689a2061aafd4147897ff59e5ee46e78084ca-9181203-images-thumbs&n=13\" />\r\n            {props.message}\r\n            <div>\r\n                <span>{props.like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {TextField} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {addPost} from \"../../../state/ProfileReducer\";\r\nimport {useAppDispatch} from \"../../../state/redux-store\";\r\n\r\ntype Errors_T = {\r\n    post?: string,\r\n}\r\nexport const FormPost = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(addPost(values.post))\r\n            formik.resetForm({\r\n                values: {post: ''},\r\n            })\r\n        },\r\n        validate: (values) => {\r\n            const errors: Errors_T = {}\r\n            if (!values.post) {\r\n                errors.post = 'Required'\r\n            } else if (values.post.length >100) {\r\n                errors.post = 'Must not be more 100 symbols'\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <div>\r\n            <TextField\r\n                margin=\"normal\"\r\n                error={formik.touched.post && !!formik.errors.post}\r\n                {...formik.getFieldProps('post')}\r\n            />\r\n            {formik.touched.post && formik.errors.post &&\r\n                <div style={{color: 'red'}}>{formik.errors.post}</div>}\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\" >Добавить пост</button>\r\n        </div>\r\n    </form>\r\n};\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {MyPost} from \"./MyPosts\";\r\nimport {AppRootStateType} from \"../../../state/redux-store\";\r\nimport {ActionType} from \"../../../state/State\";\r\n\r\n\r\ntype MePostPropsType = {\r\n    // postsData: PostsDataType[]\r\n    // dispatch:(action:ActionType)=>void\r\n    // newPostText: string\r\n}\r\n\r\n// export const MyPostContainer = (props: MePostPropsType) => {\r\n//\r\n//     let dispatch = useDispatch()\r\n//     let posts = useSelector<AppRootStateType, PostsType[]>(state=>state.profilePage.postsData)\r\n//\r\n//     const addPost = () => {\r\n//         dispatch(addPostAC())\r\n//     }\r\n//     const onPostChange = (text:string) => {\r\n//         dispatch(updateNewPostTextAC(text))\r\n//     }\r\n//\r\n//     return <MyPost\r\n//         onPostChange={(text:string)=>onPostChange(text)}\r\n//         addPost={addPost}\r\n//         posts={posts}\r\n//     />\r\n// }\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        posts: state.profilePage.postsData\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:(action:ActionType)=>void) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)","import React from \"react\";\r\nimport {PostsType} from \"../../../state/State\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {FormPost} from \"./FormPost\";\r\n\r\ntype MePostPropsType = {\r\n    posts: PostsType[]\r\n}\r\n\r\nexport const MyPost = (props: MePostPropsType) => {\r\n    let postsElement = props.posts.map((post, index) => <Post key={index} message={post.message} like={post.like}/>)\r\n    console.log('fuck')\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            My post\r\n            <FormPost />\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//\r\n// import React, {ChangeEvent, useState} from \"react\";\r\n// import { addPostAC, updateNewPostTextAC } from \"../../../state/profileReducer\";\r\n// import {ActionType, PostsType, ProfilePageType,} from \"../../../state/State\";\r\n// import s from './MyPosts.module.css'\r\n// import {Post} from \"./Post/Post\";\r\n// import {useDispatch, useSelector} from \"react-redux\";\r\n// import {AppRootStateType} from \"../../../state/redux-store\";\r\n//\r\n//\r\n//\r\n// export type PostsDataType = {\r\n//     id: string\r\n//     message: string\r\n//     like: number\r\n// }\r\n// type MePostPropsType = {\r\n//     // postsData: PostsDataType[]\r\n//     // dispatch:(action:ActionType)=>void\r\n//     // newPostText: string\r\n// }\r\n//\r\n// export const MyPost = (props: MePostPropsType) => {\r\n//     const [postText, setPostText] = useState<string>('')\r\n//\r\n//     let dispatch = useDispatch()\r\n//     let posts = useSelector<AppRootStateType, PostsType[]>(state=>state.profilePage.postsData)\r\n//\r\n//     // let postsElement = props.postsData.map((post, index) => <Post key={index} message={post.message} like={post.like}/>)\r\n//     let postsElement = posts.map((post, index) => <Post key={index} message={post.message} like={post.like}/>)\r\n//\r\n//     const addPost = () => {\r\n//         // props.dispatch(addPostAC())\r\n//         dispatch(addPostAC())\r\n//         setPostText('')\r\n//     }\r\n//     const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//         setPostText(e.currentTarget.value)\r\n//         // props.dispatch(updateNewPostTextAC(postText))\r\n//         dispatch(updateNewPostTextAC(postText))\r\n//     }\r\n//\r\n//     return (\r\n//         <div className={s.postsBlock}>\r\n//             My post\r\n//             <div>\r\n//                 <div>\r\n//                     <textarea\r\n//                         value={postText}\r\n//                         onChange={onPostChange}\r\n//                     />\r\n//                 </div>\r\n//                 <div>\r\n//                     <button onClick={addPost}>Добавить пост</button>\r\n//                 </div>\r\n//             </div>\r\n//             <div className={s.posts}>\r\n//                 {postsElement}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }","import React from \"react\"\nimport { ProfileInfo } from \"./PropfileInfo/ProfileInfo\"\nimport { MyPostContainer } from \"./Myposts/MyPostsContainer\"\nimport { UserProfile_T } from \"./ProfileContainer\"\n\ntype ProfilePropsType = {\n    profile: UserProfile_T | null\n    status:string\n    updateUserStatus: (status:string) => void\n}\n\nexport const Profile = ({profile, status, updateUserStatus}:ProfilePropsType) => {\n\n    return (\n        <div>\n            <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus}/>\n            <MyPostContainer />\n        </div>\n    )\n}","import {ComponentType} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nexport function WithRouterHOC<T>(Component: ComponentType<T>) {\r\n    const ComponentWithRouterProp = (props: T) => {\r\n        const params = useParams<{ id: string }>();\r\n        const { ...restProps } = props\r\n        return params ? <Component {...restProps as T} id={params.id} /> : <Component {...restProps as T & {}} id={\"28717\"} />\r\n    }\r\n    return ComponentWithRouterProp\r\n}","import React from \"react\"\nimport { Profile } from \"./Profile\"\nimport { connect } from \"react-redux\"\nimport { AppRootStateType } from \"state/redux-store\"\nimport { getUserStatus, setUserInfo, updateUserStatus } from \"state/ProfileReducer\"\nimport { WithRouterHOC } from \"hoc/withRouter\"\nimport { WithAuthRedirect } from \"hoc/WithAuthRedirect\"\nimport { Navigate } from \"react-router-dom\"\n\nexport type ProfilePropsType = {\n    profile: UserProfile_T | null\n    id?: string\n    setUserInfo: (userId: string) => void\n    getUserStatus: (userId: string) => void\n    status: string\n    updateUserStatus: (status: string) => void\n    isAuth: boolean | null\n}\n\nexport type UserProfile_T = {\n    aboutMe: string;\n    contacts: UserContacts_T;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    fullName: string;\n    userId: number;\n    photos: UserPhotos_T;\n}\nexport type UserContacts_T = {\n    facebook: string;\n    vk: string;\n    twitter: string;\n    instagram: string;\n    github: string;\n}\nexport type UserPhotos_T = {\n    small: string;\n    large: string;\n}\n\nclass ProfileContainerAPI extends React.Component<ProfilePropsType> {\n\n    componentDidMount() {\n        let userId = this.props.id\n        if (userId === ':id' || userId === undefined) {\n            userId = \"28717\"\n            // if (!userId) {\n            //     this.props.history.push(\"/login\")\n            // }\n        }\n        this.props.setUserInfo(userId)\n        this.props.getUserStatus(userId)\n    }\n\n    render() {\n        if (!this.props.isAuth) {\n            return <Navigate to={'/login'}/>\n        }\n\n        return <Profile profile={this.props.profile} status={this.props.status}\n                        updateUserStatus={this.props.updateUserStatus}/>\n    }\n}\n\n// let AuthRedirectComponent = (props:ProfilePropsType) => {\n//     if (!props.isAuth) return <Navigate to={'/login'}/>\n//     return <ProfileContainerAPI {...props} />\n// }\n\nlet mapStateToProps = (state: AppRootStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth\n    }\n}\n\n// export const ProfileContainer = compose<React.ComponentType>(\n//     connect(mapStateToProps,\n//         {\n//             setUserInfo\n//         }),\n//     WithRouterHOC,\n//     WithAuthRedirect\n// )(ProfileContainerAPI)\n\nconst ProfileContainer = WithAuthRedirect(connect(mapStateToProps,\n    {\n        setUserInfo,\n        getUserStatus,\n        updateUserStatus\n    })(WithRouterHOC(ProfileContainerAPI)))\n\nexport default ProfileContainer","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppRootStateType): mapStateToProps_T => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToProps_T) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n\r\n// types\r\ntype mapStateToProps_T = {\r\n    isAuth: boolean | null\r\n}"],"names":["ProfileStatusWithHook","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileInfo","profile","Preloader","userContacts","Object","entries","contacts","contact","push","className","s","src","photos","large","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","map","Post","message","like","FormPost","dispatch","useAppDispatch","formik","useFormik","initialValues","post","onSubmit","values","addPost","resetForm","validate","errors","length","handleSubmit","TextField","margin","error","touched","getFieldProps","style","color","type","MyPostContainer","connect","state","posts","profilePage","postsData","postsElement","index","console","log","Profile","Component","ProfileContainerAPI","userId","this","id","undefined","setUserInfo","getUserStatus","isAuth","to","React","WithAuthRedirect","auth","params","useParams","restProps","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps"],"sourceRoot":""}