{"version":3,"file":"static/js/70.35131079.chunk.js","mappings":"kQA4FA,UArFc,WAEV,IAAMA,GAASC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAE5CI,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAAAC,GACNT,GAASU,EAAAA,EAAAA,IAAMD,IACfP,EAAOS,UAAU,CACbF,OAAQ,CAACJ,MAAO,GAAIC,SAAU,GAAIC,YAAY,MAGtDK,SAAU,SAACH,GACP,IAAMI,EAAmB,GAWzB,OAVKJ,EAAOH,SAEDG,EAAOH,SAASQ,OAAS,IAChCD,EAAOP,SAAW,6BAFlBO,EAAOP,SAAW,WAIjBG,EAAOJ,MAEA,4CAA4CU,KAAKN,EAAOJ,SAChEQ,EAAOR,MAAQ,yBAFfQ,EAAOR,MAAQ,WAIZQ,KAGf,OAAIjB,GACO,SAAC,KAAD,CAAUoB,GAAI,cAIrB,SAAC,KAAD,CAAMC,WAAS,EAACC,eAAgB,SAAhC,UACI,SAAC,KAAD,CAAMC,MAAI,EAACD,eAAgB,SAA3B,UACI,iBAAMV,SAAUN,EAAOkB,aAAvB,UACI,SAAC,IAAD,WACI,UAAC,IAAD,YACI,SAAC,KAAD,QAAWC,MAAM,QACNC,OAAO,SACPC,MAAOrB,EAAOsB,QAAQnB,SAAWH,EAAOW,OAAOR,OAC3CH,EAAOuB,cAAc,WAEnCvB,EAAOsB,QAAQnB,OAASH,EAAOW,OAAOR,QACnC,gBAAKqB,MAAO,CAACC,MAAO,OAApB,SAA6BzB,EAAOW,OAAOR,SAC/C,SAAC,KAAD,QAAWuB,KAAK,WACLP,MAAM,WACNC,OAAO,SACPC,MAAOrB,EAAOsB,QAAQlB,YAAcJ,EAAOW,OAAOP,UAC9CJ,EAAOuB,cAAc,cAEnCvB,EAAOsB,QAAQlB,UAAYJ,EAAOW,OAAOP,WACtC,gBAAKoB,MAAO,CAACC,MAAO,OAApB,SAA6BzB,EAAOW,OAAOP,YAC/C,SAAC,IAAD,CAAkBe,MAAO,cAAeQ,SAAS,SAAC,KAAD,QAC7CC,QAAS5B,EAAOO,OAAOF,YACnBL,EAAOuB,cAAc,mBAC7B,SAAC,IAAD,CAAQG,KAAM,SAAUG,QAAS,YAAaJ,MAAO,UAArD","sources":["Components/Login/Login.tsx"],"sourcesContent":["import React from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../state/redux-store\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField} from \"@mui/material\";\r\nimport {login} from \"../../state/AuthReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(login(values))\r\n            formik.resetForm({\r\n                values: {email: '', password: '', rememberMe: false},\r\n            })\r\n        },\r\n        validate: (values) => {\r\n            const errors: Errors_T = {}\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be more four symbols'\r\n            }\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <TextField label=\"Email\"\r\n                                       margin=\"normal\"\r\n                                       error={formik.touched.email && !!formik.errors.email}\r\n                                       {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                            <TextField type=\"password\"\r\n                                       label=\"Password\"\r\n                                       margin=\"normal\"\r\n                                       error={formik.touched.password && !!formik.errors.password}\r\n                                       {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps('rememberMe')}/>}/>\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\n//action\r\ntype Errors_T = {\r\n    email?: string,\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport type LoginDate_T = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport default Login"],"names":["isAuth","useAppSelector","state","auth","dispatch","useAppDispatch","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","login","resetForm","validate","errors","length","test","to","container","justifyContent","item","handleSubmit","label","margin","error","touched","getFieldProps","style","color","type","control","checked","variant"],"sourceRoot":""}