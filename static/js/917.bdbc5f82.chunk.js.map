{"version":3,"file":"static/js/917.bdbc5f82.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/PropfileInfo/ProfileInfo.module.css?07cc","Components/Profile/PropfileInfo/ProfileStatusWithHook.tsx","Components/Profile/PropfileInfo/Contact.tsx","webpack://samurai-way/./src/Components/Profile/PropfileInfo/ProfileBlock.module.css?b071","Components/Profile/PropfileInfo/ProfileBlock.tsx","Components/Profile/PropfileInfo/ProfileBlockForm.tsx","Components/Profile/PropfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/Myposts/MyPosts.module.css?3c92","webpack://samurai-way/./src/Components/Profile/Myposts/Post/Post.module.css?e8df","Components/Profile/Myposts/Post/Post.tsx","Components/Profile/Myposts/FormPost.tsx","Components/Profile/Myposts/MyPostsContainer.tsx","Components/Profile/Myposts/MyPosts.tsx","webpack://samurai-way/./src/Components/Profile/Profile.module.css?f51d","Components/Profile/Profile.tsx","hoc/withRouter.tsx","Components/Profile/ProfileContainer.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Vvbrq\",\"imageContainer\":\"ProfileInfo_imageContainer__+NGyj\",\"uploadButton\":\"ProfileInfo_uploadButton__tGYrU\",\"photos\":\"ProfileInfo_photos__cdQ2l\",\"contact\":\"ProfileInfo_contact__2bCGh\"};","import React, { ChangeEvent, FC, useEffect, useState } from \"react\"\nimport { ProfilePropsType } from \"../ProfileContainer\"\n\ntype ProfileStatus_T = {\n  status: string\n  updateUserStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHook = (props: ProfileStatus_T) => {\n  const [editMode, setEditMode] = useState(false)\n  const [status, setStatus] = useState(props.status)\n\n  useEffect(() => {\n       setStatus(props.status)\n  }, [props.status])\n\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n  const deActivateEditMode = () => {\n    setEditMode(false)\n    props.updateUserStatus(status)\n  }\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value)\n  }\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <b>Статус:</b><span onDoubleClick={activateEditMode}>{ status || \"----\"}</span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input onChange={onStatusChange} autoFocus value={status} onBlur={deActivateEditMode}></input>\n        </div>\n      )}\n    </div>\n  )\n}\n","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: Props) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"editButton\":\"ProfileBlock_editButton__Crn-J\"};","import {UserProfile_T} from \"../ProfileContainer\";\r\nimport React from \"react\";\r\nimport {Contact} from \"./Contact\";\r\nimport s from './ProfileBlock.module.css'\r\n\r\ntype Props = {\r\n    profile: UserProfile_T\r\n    isOwner: boolean\r\n    goToEditMode: ()=> void\r\n}\r\nexport const ProfileBlock = ({profile, isOwner, goToEditMode}: Props) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode} className={s.editButton}>Редактировать информацию о себе *</button>\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Полное имя:</b> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Ищу работу:</b> {profile.lookingForAJob ? 'ищу' : \"Не ищу)\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>Мои профессиональные навыки:</b> {profile.lookingForAJobDescription}\r\n            </div>}\r\n        <div>\r\n            <div>\r\n                <b>Обо мне</b>: {profile.aboutMe}\r\n            </div>\r\n            <b>Контакты:</b> {Object.keys(profile.contacts).map(contact => {\r\n            return <Contact key={contact} contactTitle={contact} contactValue={profile.contacts[contact]}/>\r\n        })\r\n        }\r\n        </div>\r\n    </div>\r\n\r\n}","import {UserProfile_T} from \"../ProfileContainer\";\r\nimport React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Checkbox, FormControlLabel, TextField} from \"@mui/material\";\r\nimport {useAppDispatch} from \"../../../state/redux-store\";\r\nimport {saveProfile} from \"../../../state/ProfileReducer\";\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\ntype Props = {\r\n    profile: UserProfile_T\r\n    goToEditMode: () => void\r\n}\r\nexport const ProfileBlockForm = ({profile, goToEditMode}: Props) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: profile.contacts\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(saveProfile(values))\r\n                .then(()=>{\r\n                    goToEditMode()\r\n                })\r\n                .catch((e)=>{\r\n                    console.log(e)\r\n\r\n                })\r\n\r\n        },\r\n        validate: (values) => {\r\n            const errors: Errors_T = {}\r\n\r\n            return errors\r\n        }\r\n    })\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <div>\r\n            <Button type={'submit'} variant={'contained'} color={'success'}>\r\n                Сохранить\r\n            </Button>\r\n        </div>\r\n        <div>\r\n            <b>Полное имя:</b>\r\n            <div>\r\n                <TextField\r\n                    // label=\"Полное имя\"\r\n                    // margin=\"normal\"\r\n                    margin={\"none\"}\r\n                    size={'small'}\r\n                    error={formik.touched.fullName && !!formik.errors.fullName}\r\n                    {...formik.getFieldProps('fullName')}\r\n                />\r\n                {formik.touched.fullName && formik.errors.fullName &&\r\n                    <div style={{color: 'red'}}>{formik.errors.fullName}</div>}\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <b>Ищу работу:</b>\r\n            <div><FormControlLabel label={'Ищу работу'} control={<Checkbox\r\n                checked={formik.values.lookingForAJob}\r\n                {...formik.getFieldProps('lookingForAJob')}/>}/>\r\n                {formik.touched.lookingForAJob && formik.errors.lookingForAJob &&\r\n                    <div style={{color: 'red'}}>{formik.errors.lookingForAJob}</div>}\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <b>Мои профессиональные навыки:</b>\r\n            <div><TextField\r\n                margin={\"none\"}\r\n                size={'small'}\r\n                error={formik.touched.lookingForAJobDescription && !!formik.errors.lookingForAJobDescription}\r\n                {...formik.getFieldProps('lookingForAJobDescription')}\r\n            />\r\n                {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                    <div style={{color: 'red'}}>{formik.errors.lookingForAJobDescription}</div>}\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <div>\r\n                <b>Обо мне:</b>\r\n                <div><TextField\r\n                    placeholder={'aboutMe'}\r\n                    margin={\"none\"}\r\n                    size={'small'}\r\n                    error={formik.touched.aboutMe && !!formik.errors.aboutMe}\r\n                    {...formik.getFieldProps('aboutMe')}\r\n                />\r\n                    {formik.touched.aboutMe && formik.errors.aboutMe &&\r\n                        <div style={{color: 'red'}}>{formik.errors.aboutMe}</div>}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <b>Контакты:</b> {Object.keys(profile.contacts).map(contact => {\r\n                return <div key={contact} className={s.contact}>\r\n                    <b>{contact}:</b>\r\n                    <div><TextField\r\n                        placeholder={contact}\r\n                        margin={\"none\"}\r\n                        size={'small'}\r\n                        error={formik.touched.contacts && !!formik.errors.contacts}\r\n                        {...formik.getFieldProps('contacts.' + contact)}\r\n                    />\r\n                        {formik.touched.contacts && formik.errors.contacts &&\r\n                            <div style={{color: 'red'}}>{formik.errors.contacts}</div>}\r\n                    </div>\r\n                </div>\r\n            })\r\n            }\r\n            </div>\r\n        </div>\r\n    </form>\r\n\r\n}\r\n\r\ntype Errors_T = {\r\n    fullName?: string,\r\n    status?: string,\r\n    lookingForAJob?: boolean,\r\n    lookingForAJobDescription?: string,\r\n    aboutMe?: string\r\n}","import React, {ChangeEvent, useRef, useState} from \"react\"\nimport s from \"./ProfileInfo.module.css\"\nimport {UserProfile_T} from \"../ProfileContainer\"\nimport {Preloader} from \"../../common/Preloader/Preloader\"\nimport {ProfileStatusWithHook} from \"Components/Profile/PropfileInfo/ProfileStatusWithHook\"\nimport userImg from \"../../../assets/images/user.jpg\"\nimport editPhoto from \"../../../assets/editPhoto.png\"\nimport {ProfileBlock} from \"./ProfileBlock\";\nimport {ProfileBlockForm} from \"./ProfileBlockForm\";\n\ntype Props = {\n    profile: UserProfile_T | null\n    status: string\n    updateUserStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n}\n\nexport const ProfileInfo = ({profile, status, updateUserStatus, isOwner, savePhoto}: Props) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) { // потом редирект на логин\n        return <Preloader/>\n    }\n\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <div  className={s.imageContainer}>\n                    <img alt={''} className={s.photos} src={profile.photos.large || userImg}/>\n                    {isOwner &&\n                        <div className={s.uploadButton}>\n                            <button  onClick={() => inputRef.current?.click()}>\n                                <img src={editPhoto} alt=\"\"/>\n                            </button>\n                            <input ref={inputRef} type='file' onChange={mainPhotoSelected} style={{ display: 'none' }}/>\n                        </div>\n                    }\n                </div>\n\n                {editMode\n                    ? <ProfileBlockForm profile={profile} goToEditMode={() => {\n                        setEditMode(false)\n                    }}/>\n                    : <ProfileBlock profile={profile} isOwner={isOwner} goToEditMode={() => {\n                        setEditMode(true)\n                    }}/>\n                }\n                <ProfileStatusWithHook status={status} updateUserStatus={updateUserStatus}/>\n\n            </div>\n        </div>\n\n\n    )\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__rckFr\",\"posts\":\"MyPosts_posts__L+iAS\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__rs4ej\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    like: number\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://avatars.mds.yandex.net/i?id=1dd689a2061aafd4147897ff59e5ee46e78084ca-9181203-images-thumbs&n=13\" />\r\n            {props.message}\r\n            <div>\r\n                <span>{props.like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {TextField} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {addPost} from \"../../../state/ProfileReducer\";\r\nimport {useAppDispatch} from \"../../../state/redux-store\";\r\n\r\ntype Errors_T = {\r\n    post?: string,\r\n}\r\nexport const FormPost = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(addPost(values.post))\r\n            formik.resetForm({\r\n                values: {post: ''},\r\n            })\r\n        },\r\n        validate: (values) => {\r\n            const errors: Errors_T = {}\r\n            if (!values.post) {\r\n                errors.post = 'Required'\r\n            } else if (values.post.length >100) {\r\n                errors.post = 'Must not be more 100 symbols'\r\n            }\r\n            return errors\r\n        }\r\n    })\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <div>\r\n            <TextField\r\n                margin=\"normal\"\r\n                error={formik.touched.post && !!formik.errors.post}\r\n                {...formik.getFieldProps('post')}\r\n            />\r\n            {formik.touched.post && formik.errors.post &&\r\n                <div style={{color: 'red'}}>{formik.errors.post}</div>}\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\" >Добавить пост</button>\r\n        </div>\r\n    </form>\r\n};\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {MyPost} from \"./MyPosts\";\r\nimport {AppRootStateType} from \"../../../state/redux-store\";\r\nimport {ActionType} from \"../../../state/State\";\r\n\r\n\r\ntype MePostPropsType = {\r\n    // postsData: PostsDataType[]\r\n    // dispatch:(action:ActionType)=>void\r\n    // newPostText: string\r\n}\r\n\r\n// export const MyPostContainer = (props: MePostPropsType) => {\r\n//\r\n//     let dispatch = useDispatch()\r\n//     let posts = useSelector<AppRootStateType, PostsType[]>(state=>state.profilePage.postsData)\r\n//\r\n//     const addPost = () => {\r\n//         dispatch(addPostAC())\r\n//     }\r\n//     const onPostChange = (text:string) => {\r\n//         dispatch(updateNewPostTextAC(text))\r\n//     }\r\n//\r\n//     return <MyPost\r\n//         onPostChange={(text:string)=>onPostChange(text)}\r\n//         addPost={addPost}\r\n//         posts={posts}\r\n//     />\r\n// }\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        posts: state.profilePage.postsData\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:(action:ActionType)=>void) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)","import React from \"react\";\r\nimport {PostsType} from \"../../../state/State\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {FormPost} from \"./FormPost\";\r\n\r\ntype MePostPropsType = {\r\n    posts: PostsType[]\r\n}\r\n\r\nexport const MyPost = (props: MePostPropsType) => {\r\n    let postsElement = props.posts.map((post, index) => <Post key={index} message={post.message} like={post.like}/>)\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            My post\r\n            <FormPost />\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//\r\n// import React, {ChangeEvent, useState} from \"react\";\r\n// import { addPostAC, updateNewPostTextAC } from \"../../../state/profileReducer\";\r\n// import {ActionType, PostsType, ProfilePageType,} from \"../../../state/State\";\r\n// import s from './MyPosts.module.css'\r\n// import {Post} from \"./Post/Post\";\r\n// import {useDispatch, useSelector} from \"react-redux\";\r\n// import {AppRootStateType} from \"../../../state/redux-store\";\r\n//\r\n//\r\n//\r\n// export type PostsDataType = {\r\n//     id: string\r\n//     message: string\r\n//     like: number\r\n// }\r\n// type MePostPropsType = {\r\n//     // postsData: PostsDataType[]\r\n//     // dispatch:(action:ActionType)=>void\r\n//     // newPostText: string\r\n// }\r\n//\r\n// export const MyPost = (props: MePostPropsType) => {\r\n//     const [postText, setPostText] = useState<string>('')\r\n//\r\n//     let dispatch = useDispatch()\r\n//     let posts = useSelector<AppRootStateType, PostsType[]>(state=>state.profilePage.postsData)\r\n//\r\n//     // let postsElement = props.postsData.map((post, index) => <Post key={index} message={post.message} like={post.like}/>)\r\n//     let postsElement = posts.map((post, index) => <Post key={index} message={post.message} like={post.like}/>)\r\n//\r\n//     const addPost = () => {\r\n//         // props.dispatch(addPostAC())\r\n//         dispatch(addPostAC())\r\n//         setPostText('')\r\n//     }\r\n//     const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//         setPostText(e.currentTarget.value)\r\n//         // props.dispatch(updateNewPostTextAC(postText))\r\n//         dispatch(updateNewPostTextAC(postText))\r\n//     }\r\n//\r\n//     return (\r\n//         <div className={s.postsBlock}>\r\n//             My post\r\n//             <div>\r\n//                 <div>\r\n//                     <textarea\r\n//                         value={postText}\r\n//                         onChange={onPostChange}\r\n//                     />\r\n//                 </div>\r\n//                 <div>\r\n//                     <button onClick={addPost}>Добавить пост</button>\r\n//                 </div>\r\n//             </div>\r\n//             <div className={s.posts}>\r\n//                 {postsElement}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }","// extracted by mini-css-extract-plugin\nexport default {\"wrapperBlockProfile\":\"Profile_wrapperBlockProfile__BpDmK\"};","import React from \"react\"\nimport { ProfileInfo } from \"./PropfileInfo/ProfileInfo\"\nimport { MyPostContainer } from \"./Myposts/MyPostsContainer\"\nimport { UserProfile_T } from \"./ProfileContainer\"\nimport s from './Profile.module.css'\n\ntype ProfilePropsType = {\n    profile: UserProfile_T | null\n    status:string\n    updateUserStatus: (status:string) => void\n    isOwner: boolean\n    savePhoto: (photo: File) => void\n}\n\nexport const Profile = ({profile, status, updateUserStatus, isOwner, savePhoto}:ProfilePropsType) => {\n\n    return (\n        <div className={s.wrapperBlockProfile}>\n            <ProfileInfo savePhoto={savePhoto} isOwner={isOwner} profile={profile} status={status} updateUserStatus={updateUserStatus}/>\n            <MyPostContainer />\n        </div>\n    )\n}","import {ComponentType} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nexport function WithRouterHOC<T>(Component: ComponentType<T>) {\r\n    const ComponentWithRouterProp = (props: T) => {\r\n        const params = useParams<{ id: string }>();\r\n        const { ...restProps } = props\r\n        return params ? <Component {...restProps as T} id={params.id} /> : <Component {...restProps as T & {}} id={\"28717\"} />\r\n    }\r\n    return ComponentWithRouterProp\r\n}","import React from \"react\"\nimport { Profile } from \"./Profile\"\nimport { connect } from \"react-redux\"\nimport { AppRootStateType } from \"state/redux-store\"\nimport {getUserStatus, savePhoto, setUserInfo, updateUserStatus} from \"state/ProfileReducer\"\nimport { WithRouterHOC } from \"hoc/withRouter\"\nimport { WithAuthRedirect } from \"hoc/WithAuthRedirect\"\nimport { Navigate } from \"react-router-dom\"\n\nexport type ProfilePropsType = {\n    profile: UserProfile_T | null\n    id?: string\n    setUserInfo: (userId: string) => void\n    getUserStatus: (userId: string) => void\n    status: string\n    updateUserStatus: (status: string) => void\n    isAuth: boolean | null\n    savePhoto: (photo: File) => void\n}\n\nexport type UserProfile_T = {\n    aboutMe: string;\n    contacts: any;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    fullName: string;\n    userId: number;\n    photos: UserPhotos_T;\n}\nexport type UserPhotos_T = {\n    small: string | undefined;\n    large: string | undefined;\n}\n\nclass ProfileContainerAPI extends React.Component<ProfilePropsType> {\n\n    refreshProfile(){\n        let userId = this.props.id\n        // if (userId === ':id' || userId === undefined) {\n        if (!userId) {\n            userId = '28717'\n            // if (!userId) {\n            //     this.props.history.push(\"/login\")\n            // }\n        }\n        if (userId) {\n            this.props.setUserInfo(userId)\n            this.props.getUserStatus(userId)\n        }\n\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.id !== prevProps.id) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        if (!this.props.isAuth) {\n            return <Navigate to={'/login'}/>\n        }\n\n        return <Profile isOwner={!this.props.id} profile={this.props.profile} status={this.props.status}\n                        updateUserStatus={this.props.updateUserStatus} savePhoto={this.props.savePhoto}/>\n    }\n}\n\n// let AuthRedirectComponent = (props:ProfilePropsType) => {\n//     if (!props.isAuth) return <Navigate to={'/login'}/>\n//     return <ProfileContainerAPI {...props} />\n// }\n\nlet mapStateToProps = (state: AppRootStateType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth\n    }\n}\n\n// export const ProfileContainer = compose<React.ComponentType>(\n//     connect(mapStateToProps,\n//         {\n//             setUserInfo\n//         }),\n//     WithRouterHOC,\n//     WithAuthRedirect\n// )(ProfileContainerAPI)\n\nconst ProfileContainer = WithAuthRedirect(connect(mapStateToProps,\n    {\n        setUserInfo,\n        getUserStatus,\n        updateUserStatus,\n        savePhoto\n    })(WithRouterHOC(ProfileContainerAPI)))\n\nexport default ProfileContainer","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppRootStateType): mapStateToProps_T => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToProps_T) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n\r\n// types\r\ntype mapStateToProps_T = {\r\n    isAuth: boolean | null\r\n}"],"names":["ProfileStatusWithHook","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","Contact","contactTitle","contactValue","className","s","ProfileBlock","profile","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","contact","ProfileBlockForm","dispatch","useAppDispatch","formik","useFormik","initialValues","onSubmit","values","saveProfile","then","catch","console","log","validate","handleSubmit","Button","type","variant","color","TextField","margin","size","error","touched","errors","getFieldProps","style","FormControlLabel","label","control","Checkbox","checked","placeholder","ProfileInfo","savePhoto","inputRef","useRef","Preloader","alt","src","photos","large","userImg","current","click","editPhoto","ref","target","files","length","display","Post","message","like","FormPost","post","addPost","resetForm","MyPostContainer","connect","state","posts","profilePage","postsData","postsElement","index","Profile","Component","ProfileContainerAPI","userId","this","id","setUserInfo","getUserStatus","refreshProfile","prevProps","prevState","snapshot","isAuth","to","React","WithAuthRedirect","auth","params","useParams","restProps","_objectWithoutProperties","source","excluded","key","i","sourceKeys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps"],"sourceRoot":""}